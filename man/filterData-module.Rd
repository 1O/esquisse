% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/module-filterData.R
\name{filterData-module}
\alias{filterData-module}
\alias{filterDataUI}
\alias{filterDataServer}
\title{Modules for creating filters from a data.frame}
\usage{
filterDataUI(id)

filterDataServer(input, output, session, data, vars = NULL)
}
\arguments{
\item{id}{Module's id}

\item{input}{standard \code{shiny} input.}

\item{output}{standard \code{shiny} output.}

\item{session}{standard \code{shiny} session.}

\item{data}{a \code{data.frame} or a \code{\link[shiny]{reactive}} function returning a \code{data.frame}.}

\item{vars}{variables for which to create filters, by default all variables in \code{data}.}
}
\value{
a \code{\link[shiny]{reactiveValues}} containing the data filtered under the slot \code{data}.
}
\description{
Modules for creating filters from a data.frame
}
\examples{

\dontrun{

if (interactive()) {
  library(shiny)
  
  ui <- fluidPage(
    
    tags$h1("Module Filter Data"),
    
    fluidRow(
      column(
        width = 4,
        radioButtons(
          inputId = "dataset", label = "Data:",
          choices = c("iris", "mtcars", "Titanic")
        ),
        filterDataUI("ex")
      ),
      column(
        width = 8,
        DT::dataTableOutput(outputId = "tab")
      )
    )
    
  )
  
  server <- function(input, output, session) {
    
    data <- reactive({
      if (input$dataset == "iris") {
        return(iris)
      } else if (input$dataset == "mtcars") {
        return(mtcars)
      } else {
        return(as.data.frame(Titanic))
      }
    })
    
    res <- callModule(module = filterDataServer, 
                      id = "ex", data = data)
    
    output$tab <- DT::renderDataTable(res$data)
    
  }
  
  shinyApp(ui, server)
}

}

}
